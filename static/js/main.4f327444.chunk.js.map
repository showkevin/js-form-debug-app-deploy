{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","params","form","document","createElement","key","method","action","url","hasOwnProperty","hiddenField","type","name","value","appendChild","console","log","body","submit","error","JSON","stringify","run","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,8KC4D5BC,MAxDf,WAoCE,OAhCA,SAAaC,GACX,IAEE,IAAIC,EAAOC,SAASC,cAAc,QAIlC,IAAK,IAAIC,KAHTH,EAAKI,OAAS,OACdJ,EAAKK,OAASN,EAAOO,IAELP,EACd,GAAIA,EAAOQ,eAAeJ,GAAM,CAC9B,IAAIK,EAAcP,SAASC,cAAc,SACzCM,EAAYC,KAAO,SACnBD,EAAYE,KAAOP,EACnBK,EAAYG,MAAQZ,EAAOI,GAE3BH,EAAKY,YAAYJ,GAEjBK,QAAQC,IAAIf,EAAOI,IAIvBF,SAASc,KAAKH,YAAYZ,GAE1BA,EAAKgB,SAEL,MAAOC,GAEPJ,QAAQC,IAAII,KAAKC,UAAUF,KAI/BG,CAhCiB,CAAE,KAAQ,OAAQ,KAAQ,UAAW,KAAQ,aAAc,KAAQ,mCAAoC,KAAQ,2/HAA4/H,KAAQ,GAAI,QAAW,WAAY,MAAS,QAAS,IAAO,+DAmCtrI,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCnCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLJ,QAAQI,MAAMA,EAAM2B,c","file":"static/js/main.4f327444.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  var parameters = { \"comp\": \"8560\", \"sett\": \"9803203\", \"idno\": \"A127196033\", \"seri\": \"635a4223deff2d36394d6e4a25b93c9f\", \"cert\": \"MIIL9QIBAzCCC78GCSqGSIb3DQEHAaCCC7AEggusMIILqDCCBl8GCSqGSIb3DQEHBqCCBlAwggZMAgEAMIIGRQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQYwDgQIRo1FNGOI7S0CAggAgIIGGGRG7cq1T7VpwLnhmZqFDRCgd4u+gd1UojXznbwMDHa4b04Yi0PzmkNO/ysUWQLyuCXarOabUD7DuyA3e2GkWV9PK00GzjXwgLu3JNyecbdwDUSJml40L8Z+h+6rdD3OcjlzXl9D+z/fo+uDdf9+RuG+0ZHEFM+feaVAE+wUJKRQLV3qhiOMi8HcMCjRBlPJRBVW9qgJnTrmYpnMIG6vUlJQQVFTprCt/eiXnq07KUBn8Hk+qgrmCgy66HWE40qGop2E/dL3xyUbq7Or2J9siyoMQ4yPOALrsryCR2KUUIiKyFZC5l2ATCdXCaYiXf+J1taItJrvxsAm5I4X6r/siXHFtq8sfZipkewbRvL4Zv4d3RiAepHltUdfGf6YLqUJV58k5gfg7EM8o3L41sUJ0WXVVkF8ezziGJayF3snQqfydWr4Tyt8Ra7y7kZlRggYtI3O8FW3u0BAL/PtpnOMMV7eWiWel9yoELtcsh3xQHTymFNQviSXqLWU6l9Yb/DT8cj78HOCx6qZESB+h0SqeA3QRpZyTjoeYTUbIkEdTXqwqseQBd0qcdM+zscqhe59jTGWwH8VuOWPAIF3WPTrIr2aH7Ai2bXpnexfuAjbCdiPXNKdR7/l24adcPvEtTtFvoFBApUdRcRckkmzlMeZkHm5zwXXdq8Xwo3mgw1XUx+lQd7k2wVx7gYq03INq2jqVwrEmDlQTqLxhWgDxe7ayGUDJxfKoSbIrWSZ5Ct9P5KAOEoXm/SHqBBEbL58wRlJhHPco3GpAFSOZ1YKgkzzOh+2u/DNFew9s24CLPJSn2aHG1ooe8ZW9gUe9RDLSc6FCZI9ZGDaSiUdEqWgT6RqEa3TdnkkvCa39DqrFabBjFrgC78+Kg2R5DeHnsJERXHDBzvFGM3zp931AYHQkC6M+riKP4QfQqL4Rb1vH2orSHckN+SJvgmAYF1/PzoOD06B+clPZ7vNuvF3WgtzL14Z4PYOGU9DyGkizkAKWicQnE9fOiUMjVd8+IlDEm+b5cWi6+AfooLwIrISt6N4KSUTJX+0P+ayzjDesRRWE8MezxBDj6lFk7P8V4q7yaqRYUvYp7p7NgSZB96GHS30K6uGKKbMPIckRtRZfaraVuEacR5I+0y6UZdTA1+Mjg5JdGwFiUPfs2VVXDHwU1GP+o82skdqzTu9vvSCnJzV2zOaB5mim1pdz6j0idIP2zBCnt+ZQghAP6kraAX1fwNVhNyf5cSPRdc2QbmmqTTjwHNXGR8QYaYadhANyv728moDtKruGVO3G+J/UwfHsYnKFp2Wa04KFmikp9Q2K7ZyOCRgvDgrDG4bOCruhDz7w65+J0EWhBUrIE0mrDrZUla+LvSf/dn/kOghZdIjM3N/cBsuBRfgOjsN/GVHAjBcGIjsVEZSrUpJtkf+c/u7+A9EKaCd25XUxYKrMcQo3DPahc8LAmT2SqAm5j6Qm0SdinE+iHJ1fEEykcKStMeaE2p1m3WM08XZtqVLBiKoZ0FkQbZLzIib1Ti5Hq67rMWf/FZKxErnSOCDy+KYO4Uqbv1lbSs8SjG2b254xOEFj2dDudhIDZ1WPgdvT0kmX02dNVW0hW/R+v2gDBRm3sjDZCPpIUnZZa0Vq4U7mxEEMG7POVtTRaBFP3WN4nVf1WdT4BftqOzKj0VkvThYM77OAEXcWIN9TPeqdXAxxLchrSJzctPE2vsTNN246eQzyCwKq/Ui9lr49PcXemvHar8mSF7M6GxwcPv2Ix4eUU55vvN1wwapG1Fz/9r3BeuE7WlEoquwkJidcrVtaCpHMrXys+0917pZSC9oQo4UwZ469F+/lSljzmIvyupuE9JuPpbsyKhomitWkEkXyzLEn1YT6eLIXK3vvrcy2Z6YvnnfbDPP+lCY5OlOOCmx1ljYr8ZzJRUKnCC2H4TIPtsFHVaPzSqv6yFos7C0NJT4eBfpr1I6X2LvJQ0jGXM3A8YQWuKM8EJA7hl80z7uFWcr3wBYmNlVllbCIvf0PwcvWNwc0vBpyyJYa535izTKYaVj1VbNar+8D+kID1w0HL6uds90dRWd94uWSpoD7Mi7LSsbPzCCBUEGCSqGSIb3DQEHAaCCBTIEggUuMIIFKjCCBSYGCyqGSIb3DQEMCgECoIIE7jCCBOowHAYKKoZIhvcNAQwBAzAOBAijuEaVLK2Y1AICCAAEggTIljZD9OIKB8qYG+z49rl7KMABUnb2xmI7JZWd4pXy8vYAZdGc7c6ypHz8kX0XNDkcDs5r5BgAUVsNMfIKuF1dguZd4HiccNQEOxyem9JBbdNv/Pky/cB/IARSkxUNtAkXXOJxrfmkbUZVVuCMCzLqVCZwinvtrZXMmJv5P8a4D7LkVjyE2sUhdl5H/QTLTICPshyW6KpG6xiNGhlgKb8UHUKCPSicbK1XhHS+ENQ17VJuiBhZjyL2bBykMPfTh2Mf+9rqbq7H6X+dENw/Jzdtk1sjzkP7LpOYFZBTNeVd/qvsfYDCHPy5sFlWichd/CYrAcYC1Yop69mKPWKvULvmqXa62GrS1tMYoa5NBFhbg+37xGyaRMFVRSeKiKd2SuCKufK1MjyCdVQlgptnShNUoq/t39/QY3rjK5gqKK718SNkbjW9+So2fgjeHx7FKqMTCB/Lg3g8mcUtDOB7srpf1djLeo5//MGcxJYI42rt6chDoQU35zfjgBlKvV/WroiNWcZc4kw+W/m1RrbMC7ZwWcuENKZ7tai5ddPmJuvgvLqNk3lRHYyybTRBFohJYF8RqcvGB0qo1+XZ8NaUOGrmJoZxn/bIlyT/G0BtHVt9vHboQ8emcN+gmP/fL9IeiFQe1xcE8cxn5rPppbvmStfqJsWedbwjQVG5sZF5WWLvUhv+i4vlexkpfMPt2UPebsD6uAmB4hPbjfaUQkCNwLWrqSMG7WXGo5TOX629sF2CUdEqqUb0TybEkj7cG8dtibNFmCx8AEbaDRHpaKXnst6B5XXTJ0DfkNQ/9iL/rOqvbzAnX1Q7W/pR4muaC4gzvDMjU1mk4IqiPfBYkpABYcjRZp7483J4PqKfVKY3Eu6p5Eg22M5jk99eUutHX/CforJZEf1e9sRKkWE0pC7Q48xhc2Xg7J+8fIkbae4cM3giCvxrobl7Nx5zkd1T1GkHTAqb8ChWtcMvQv32TjFXSWkG4ZNx6vj8201ggZzpOjVdXvNLD4vdtyGmRmSMVgB+PmUBvt9s5J4Lsjz2lZUns7FgXFSd0d4t/vzNpn+iz22TKXIodO9YDpzVVgyDkDjN9zy2lu1nLqqCPpC4NHJFx3KhPn+X8J+6Mx60zw1JRubOPkl+63e0jp5YAE/9/4jyVj4jhYhe+9BHhiRryLChXpYi7Bl1elezLxpOlsqIfoq1+qpOQEDyWjPKwRvadfFPSkEdFoUtzk2RAul6oMAUHm1pIK7plhZ/Uz0g8Kf6knJwIeYHJ2dVQrZuEGtE7WWnVz9jGeMKv1I1SNVFvCTipPNYMrc3gzKUXrCVjTkmjm6TNYoKmUnNv8qOHfVpgS3cGmyxAmmZa201clog+sYKhqEssDOcbtwtv3dnzB9/DkhU7oQW8RvYW4bes7mtA9hLg7CkRD4sJ+FGIbGybdkijGUUIN5Gs0mE8Ua612ZUDHGnru0RndPV7SbYEj8ueVgW/pg5Zx4Bx1MdPirK83mKQR2l31DcBJY8hR/AhUO+GkVShd2QaJz+3I6ImrasEori8hmfamWwhmf8nxF7SotXQP8ZvdyVxnl38cq+g9AXlo+s9H6/qhQpYAQbvLvNE5Rg6U+RnnizK88XFlsbXHR4gFvw5Fhh5Ck9EhjnMSUwIwYJKoZIhvcNAQkVMRYEFB0zGs/mDFNi8R3F0Nrbnl40SdrqMC0wITAJBgUrDgMCGgUABBSn6qyKcM9MqTKVNAFakRfSyeJtkAQIY8QxNt/nuuo=\", \"clid\": \"\", \"ApplyIP\": \"10.0.1.1\", \"clerk\": \"30008\", \"url\": \"http://w13.sk88.com.tw/StockLoanWebApi/WebLogin/ThirdParty\" };\n\n  function run(params) {\n    try {\n      debugger;\n      var form = document.createElement('form');\n      form.method = 'post';\n      form.action = params.url;\n\n      for (var key in params) {\n        if (params.hasOwnProperty(key)) {\n          var hiddenField = document.createElement('input');\n          hiddenField.type = 'hidden';\n          hiddenField.name = key;\n          hiddenField.value = params[key];\n\n          form.appendChild(hiddenField);\n\n          console.log(params[key]);\n        }\n      }\n\n      document.body.appendChild(form);\n      debugger;\n      form.submit();\n\n    } catch (error) {\n      debugger;\n      console.log(JSON.stringify(error));\n    }\n  }\n\n  run(parameters);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}